// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: encounter_requests/encounter-request.proto

package encounter_requests

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EncounterRequestService_CreateEncounterRequest_FullMethodName  = "/EncounterRequestService/CreateEncounterRequest"
	EncounterRequestService_GetAllEncounterRequests_FullMethodName = "/EncounterRequestService/GetAllEncounterRequests"
	EncounterRequestService_AcceptEncounterRequest_FullMethodName  = "/EncounterRequestService/AcceptEncounterRequest"
	EncounterRequestService_RejectEncounterRequest_FullMethodName  = "/EncounterRequestService/RejectEncounterRequest"
)

// EncounterRequestServiceClient is the client API for EncounterRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncounterRequestServiceClient interface {
	CreateEncounterRequest(ctx context.Context, in *CreateEncounterRequestDto, opts ...grpc.CallOption) (*EncounterRequestResponseDto, error)
	GetAllEncounterRequests(ctx context.Context, in *GetAllEncounterRequestsRequest, opts ...grpc.CallOption) (*GetAllEncounterRequestsResponse, error)
	AcceptEncounterRequest(ctx context.Context, in *AcceptEncounterRequestDto, opts ...grpc.CallOption) (*EncounterRequestResponseDto, error)
	RejectEncounterRequest(ctx context.Context, in *RejectEncounterRequestDto, opts ...grpc.CallOption) (*EncounterRequestResponseDto, error)
}

type encounterRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncounterRequestServiceClient(cc grpc.ClientConnInterface) EncounterRequestServiceClient {
	return &encounterRequestServiceClient{cc}
}

func (c *encounterRequestServiceClient) CreateEncounterRequest(ctx context.Context, in *CreateEncounterRequestDto, opts ...grpc.CallOption) (*EncounterRequestResponseDto, error) {
	out := new(EncounterRequestResponseDto)
	err := c.cc.Invoke(ctx, EncounterRequestService_CreateEncounterRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterRequestServiceClient) GetAllEncounterRequests(ctx context.Context, in *GetAllEncounterRequestsRequest, opts ...grpc.CallOption) (*GetAllEncounterRequestsResponse, error) {
	out := new(GetAllEncounterRequestsResponse)
	err := c.cc.Invoke(ctx, EncounterRequestService_GetAllEncounterRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterRequestServiceClient) AcceptEncounterRequest(ctx context.Context, in *AcceptEncounterRequestDto, opts ...grpc.CallOption) (*EncounterRequestResponseDto, error) {
	out := new(EncounterRequestResponseDto)
	err := c.cc.Invoke(ctx, EncounterRequestService_AcceptEncounterRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterRequestServiceClient) RejectEncounterRequest(ctx context.Context, in *RejectEncounterRequestDto, opts ...grpc.CallOption) (*EncounterRequestResponseDto, error) {
	out := new(EncounterRequestResponseDto)
	err := c.cc.Invoke(ctx, EncounterRequestService_RejectEncounterRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncounterRequestServiceServer is the server API for EncounterRequestService service.
// All implementations must embed UnimplementedEncounterRequestServiceServer
// for forward compatibility
type EncounterRequestServiceServer interface {
	CreateEncounterRequest(context.Context, *CreateEncounterRequestDto) (*EncounterRequestResponseDto, error)
	GetAllEncounterRequests(context.Context, *GetAllEncounterRequestsRequest) (*GetAllEncounterRequestsResponse, error)
	AcceptEncounterRequest(context.Context, *AcceptEncounterRequestDto) (*EncounterRequestResponseDto, error)
	RejectEncounterRequest(context.Context, *RejectEncounterRequestDto) (*EncounterRequestResponseDto, error)
	mustEmbedUnimplementedEncounterRequestServiceServer()
}

// UnimplementedEncounterRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncounterRequestServiceServer struct {
}

func (UnimplementedEncounterRequestServiceServer) CreateEncounterRequest(context.Context, *CreateEncounterRequestDto) (*EncounterRequestResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncounterRequest not implemented")
}
func (UnimplementedEncounterRequestServiceServer) GetAllEncounterRequests(context.Context, *GetAllEncounterRequestsRequest) (*GetAllEncounterRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEncounterRequests not implemented")
}
func (UnimplementedEncounterRequestServiceServer) AcceptEncounterRequest(context.Context, *AcceptEncounterRequestDto) (*EncounterRequestResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptEncounterRequest not implemented")
}
func (UnimplementedEncounterRequestServiceServer) RejectEncounterRequest(context.Context, *RejectEncounterRequestDto) (*EncounterRequestResponseDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectEncounterRequest not implemented")
}
func (UnimplementedEncounterRequestServiceServer) mustEmbedUnimplementedEncounterRequestServiceServer() {
}

// UnsafeEncounterRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncounterRequestServiceServer will
// result in compilation errors.
type UnsafeEncounterRequestServiceServer interface {
	mustEmbedUnimplementedEncounterRequestServiceServer()
}

func RegisterEncounterRequestServiceServer(s grpc.ServiceRegistrar, srv EncounterRequestServiceServer) {
	s.RegisterService(&EncounterRequestService_ServiceDesc, srv)
}

func _EncounterRequestService_CreateEncounterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEncounterRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterRequestServiceServer).CreateEncounterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterRequestService_CreateEncounterRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterRequestServiceServer).CreateEncounterRequest(ctx, req.(*CreateEncounterRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterRequestService_GetAllEncounterRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEncounterRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterRequestServiceServer).GetAllEncounterRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterRequestService_GetAllEncounterRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterRequestServiceServer).GetAllEncounterRequests(ctx, req.(*GetAllEncounterRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterRequestService_AcceptEncounterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptEncounterRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterRequestServiceServer).AcceptEncounterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterRequestService_AcceptEncounterRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterRequestServiceServer).AcceptEncounterRequest(ctx, req.(*AcceptEncounterRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterRequestService_RejectEncounterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectEncounterRequestDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterRequestServiceServer).RejectEncounterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterRequestService_RejectEncounterRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterRequestServiceServer).RejectEncounterRequest(ctx, req.(*RejectEncounterRequestDto))
	}
	return interceptor(ctx, in, info, handler)
}

// EncounterRequestService_ServiceDesc is the grpc.ServiceDesc for EncounterRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncounterRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EncounterRequestService",
	HandlerType: (*EncounterRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEncounterRequest",
			Handler:    _EncounterRequestService_CreateEncounterRequest_Handler,
		},
		{
			MethodName: "GetAllEncounterRequests",
			Handler:    _EncounterRequestService_GetAllEncounterRequests_Handler,
		},
		{
			MethodName: "AcceptEncounterRequest",
			Handler:    _EncounterRequestService_AcceptEncounterRequest_Handler,
		},
		{
			MethodName: "RejectEncounterRequest",
			Handler:    _EncounterRequestService_RejectEncounterRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encounter_requests/encounter-request.proto",
}
