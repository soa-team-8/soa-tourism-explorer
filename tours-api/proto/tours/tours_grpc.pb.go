// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tours/tours.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ToursService_CreateTour_FullMethodName       = "/ToursService/CreateTour"
	ToursService_GetToursByAuthor_FullMethodName = "/ToursService/GetToursByAuthor"
	ToursService_GetAllTours_FullMethodName      = "/ToursService/GetAllTours"
	ToursService_AddEquipment_FullMethodName     = "/ToursService/AddEquipment"
	ToursService_RemoveEquipment_FullMethodName  = "/ToursService/RemoveEquipment"
	ToursService_GetTourDetails_FullMethodName   = "/ToursService/GetTourDetails"
	ToursService_DeleteTour_FullMethodName       = "/ToursService/DeleteTour"
	ToursService_PublishTour_FullMethodName      = "/ToursService/PublishTour"
	ToursService_ArchiveTour_FullMethodName      = "/ToursService/ArchiveTour"
	ToursService_UpdateTour_FullMethodName       = "/ToursService/UpdateTour"
)

// ToursServiceClient is the client API for ToursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToursServiceClient interface {
	CreateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*ActionResponse, error)
	GetToursByAuthor(ctx context.Context, in *GetToursByAuthorRequest, opts ...grpc.CallOption) (*ListTourDtoResponse, error)
	GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*ListTourDtoResponse, error)
	AddEquipment(ctx context.Context, in *AddEquipmentRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	RemoveEquipment(ctx context.Context, in *RemoveEquipmentRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	GetTourDetails(ctx context.Context, in *GetTourDetailsRequest, opts ...grpc.CallOption) (*TourDto, error)
	DeleteTour(ctx context.Context, in *DeleteTourRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*ActionResponse, error)
}

type toursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToursServiceClient(cc grpc.ClientConnInterface) ToursServiceClient {
	return &toursServiceClient{cc}
}

func (c *toursServiceClient) CreateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetToursByAuthor(ctx context.Context, in *GetToursByAuthorRequest, opts ...grpc.CallOption) (*ListTourDtoResponse, error) {
	out := new(ListTourDtoResponse)
	err := c.cc.Invoke(ctx, ToursService_GetToursByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*ListTourDtoResponse, error) {
	out := new(ListTourDtoResponse)
	err := c.cc.Invoke(ctx, ToursService_GetAllTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) AddEquipment(ctx context.Context, in *AddEquipmentRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_AddEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) RemoveEquipment(ctx context.Context, in *RemoveEquipmentRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_RemoveEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetTourDetails(ctx context.Context, in *GetTourDetailsRequest, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, ToursService_GetTourDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) DeleteTour(ctx context.Context, in *DeleteTourRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_DeleteTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_PublishTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_ArchiveTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ToursService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToursServiceServer is the server API for ToursService service.
// All implementations must embed UnimplementedToursServiceServer
// for forward compatibility
type ToursServiceServer interface {
	CreateTour(context.Context, *TourDto) (*ActionResponse, error)
	GetToursByAuthor(context.Context, *GetToursByAuthorRequest) (*ListTourDtoResponse, error)
	GetAllTours(context.Context, *GetAllToursRequest) (*ListTourDtoResponse, error)
	AddEquipment(context.Context, *AddEquipmentRequest) (*ActionResponse, error)
	RemoveEquipment(context.Context, *RemoveEquipmentRequest) (*ActionResponse, error)
	GetTourDetails(context.Context, *GetTourDetailsRequest) (*TourDto, error)
	DeleteTour(context.Context, *DeleteTourRequest) (*ActionResponse, error)
	PublishTour(context.Context, *PublishTourRequest) (*ActionResponse, error)
	ArchiveTour(context.Context, *ArchiveTourRequest) (*ActionResponse, error)
	UpdateTour(context.Context, *UpdateTourRequest) (*ActionResponse, error)
	mustEmbedUnimplementedToursServiceServer()
}

// UnimplementedToursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToursServiceServer struct {
}

func (UnimplementedToursServiceServer) CreateTour(context.Context, *TourDto) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedToursServiceServer) GetToursByAuthor(context.Context, *GetToursByAuthorRequest) (*ListTourDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursByAuthor not implemented")
}
func (UnimplementedToursServiceServer) GetAllTours(context.Context, *GetAllToursRequest) (*ListTourDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTours not implemented")
}
func (UnimplementedToursServiceServer) AddEquipment(context.Context, *AddEquipmentRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEquipment not implemented")
}
func (UnimplementedToursServiceServer) RemoveEquipment(context.Context, *RemoveEquipmentRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEquipment not implemented")
}
func (UnimplementedToursServiceServer) GetTourDetails(context.Context, *GetTourDetailsRequest) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourDetails not implemented")
}
func (UnimplementedToursServiceServer) DeleteTour(context.Context, *DeleteTourRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTour not implemented")
}
func (UnimplementedToursServiceServer) PublishTour(context.Context, *PublishTourRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTour not implemented")
}
func (UnimplementedToursServiceServer) ArchiveTour(context.Context, *ArchiveTourRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTour not implemented")
}
func (UnimplementedToursServiceServer) UpdateTour(context.Context, *UpdateTourRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedToursServiceServer) mustEmbedUnimplementedToursServiceServer() {}

// UnsafeToursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToursServiceServer will
// result in compilation errors.
type UnsafeToursServiceServer interface {
	mustEmbedUnimplementedToursServiceServer()
}

func RegisterToursServiceServer(s grpc.ServiceRegistrar, srv ToursServiceServer) {
	s.RegisterService(&ToursService_ServiceDesc, srv)
}

func _ToursService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).CreateTour(ctx, req.(*TourDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetToursByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToursByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetToursByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetToursByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetToursByAuthor(ctx, req.(*GetToursByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetAllTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetAllTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetAllTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetAllTours(ctx, req.(*GetAllToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_AddEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).AddEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_AddEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).AddEquipment(ctx, req.(*AddEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_RemoveEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).RemoveEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_RemoveEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).RemoveEquipment(ctx, req.(*RemoveEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetTourDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetTourDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetTourDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetTourDetails(ctx, req.(*GetTourDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_DeleteTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).DeleteTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_DeleteTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).DeleteTour(ctx, req.(*DeleteTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_PublishTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).PublishTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_PublishTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).PublishTour(ctx, req.(*PublishTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_ArchiveTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).ArchiveTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_ArchiveTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).ArchiveTour(ctx, req.(*ArchiveTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).UpdateTour(ctx, req.(*UpdateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToursService_ServiceDesc is the grpc.ServiceDesc for ToursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToursService",
	HandlerType: (*ToursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _ToursService_CreateTour_Handler,
		},
		{
			MethodName: "GetToursByAuthor",
			Handler:    _ToursService_GetToursByAuthor_Handler,
		},
		{
			MethodName: "GetAllTours",
			Handler:    _ToursService_GetAllTours_Handler,
		},
		{
			MethodName: "AddEquipment",
			Handler:    _ToursService_AddEquipment_Handler,
		},
		{
			MethodName: "RemoveEquipment",
			Handler:    _ToursService_RemoveEquipment_Handler,
		},
		{
			MethodName: "GetTourDetails",
			Handler:    _ToursService_GetTourDetails_Handler,
		},
		{
			MethodName: "DeleteTour",
			Handler:    _ToursService_DeleteTour_Handler,
		},
		{
			MethodName: "PublishTour",
			Handler:    _ToursService_PublishTour_Handler,
		},
		{
			MethodName: "ArchiveTour",
			Handler:    _ToursService_ArchiveTour_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _ToursService_UpdateTour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours/tours.proto",
}
