// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: checkpoints/checkpoints.proto

package checkpoints

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckpointsService_CreateCheckpoint_FullMethodName       = "/CheckpointsService/CreateCheckpoint"
	CheckpointsService_CreateCheckpointSecret_FullMethodName = "/CheckpointsService/CreateCheckpointSecret"
	CheckpointsService_UpdateCheckpointSecret_FullMethodName = "/CheckpointsService/UpdateCheckpointSecret"
	CheckpointsService_DeleteCheckpoint_FullMethodName       = "/CheckpointsService/DeleteCheckpoint"
	CheckpointsService_GetAllByTour_FullMethodName           = "/CheckpointsService/GetAllByTour"
	CheckpointsService_GetById_FullMethodName                = "/CheckpointsService/GetById"
	CheckpointsService_UpdateCheckpoint_FullMethodName       = "/CheckpointsService/UpdateCheckpoint"
	CheckpointsService_GetAllPagedCheckpoints_FullMethodName = "/CheckpointsService/GetAllPagedCheckpoints"
)

// CheckpointsServiceClient is the client API for CheckpointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckpointsServiceClient interface {
	CreateCheckpoint(ctx context.Context, in *CreateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointDto2, error)
	CreateCheckpointSecret(ctx context.Context, in *CreateCheckpointSecretRequest, opts ...grpc.CallOption) (*CheckpointDto2, error)
	UpdateCheckpointSecret(ctx context.Context, in *UpdateCheckpointSecretRequest, opts ...grpc.CallOption) (*CheckpointDto2, error)
	DeleteCheckpoint(ctx context.Context, in *DeleteCheckpointRequest, opts ...grpc.CallOption) (*ActionResponse2, error)
	GetAllByTour(ctx context.Context, in *GetCheckpointsByTourRequest, opts ...grpc.CallOption) (*ListCheckpointDtoResponse, error)
	GetById(ctx context.Context, in *GetCheckpointDetailsRequest, opts ...grpc.CallOption) (*CheckpointDto2, error)
	UpdateCheckpoint(ctx context.Context, in *UpdateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointDto2, error)
	GetAllPagedCheckpoints(ctx context.Context, in *GetAllPagedCheckpointsRequest, opts ...grpc.CallOption) (*ListCheckpointDtoResponse, error)
}

type checkpointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckpointsServiceClient(cc grpc.ClientConnInterface) CheckpointsServiceClient {
	return &checkpointsServiceClient{cc}
}

func (c *checkpointsServiceClient) CreateCheckpoint(ctx context.Context, in *CreateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointDto2, error) {
	out := new(CheckpointDto2)
	err := c.cc.Invoke(ctx, CheckpointsService_CreateCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) CreateCheckpointSecret(ctx context.Context, in *CreateCheckpointSecretRequest, opts ...grpc.CallOption) (*CheckpointDto2, error) {
	out := new(CheckpointDto2)
	err := c.cc.Invoke(ctx, CheckpointsService_CreateCheckpointSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) UpdateCheckpointSecret(ctx context.Context, in *UpdateCheckpointSecretRequest, opts ...grpc.CallOption) (*CheckpointDto2, error) {
	out := new(CheckpointDto2)
	err := c.cc.Invoke(ctx, CheckpointsService_UpdateCheckpointSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) DeleteCheckpoint(ctx context.Context, in *DeleteCheckpointRequest, opts ...grpc.CallOption) (*ActionResponse2, error) {
	out := new(ActionResponse2)
	err := c.cc.Invoke(ctx, CheckpointsService_DeleteCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) GetAllByTour(ctx context.Context, in *GetCheckpointsByTourRequest, opts ...grpc.CallOption) (*ListCheckpointDtoResponse, error) {
	out := new(ListCheckpointDtoResponse)
	err := c.cc.Invoke(ctx, CheckpointsService_GetAllByTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) GetById(ctx context.Context, in *GetCheckpointDetailsRequest, opts ...grpc.CallOption) (*CheckpointDto2, error) {
	out := new(CheckpointDto2)
	err := c.cc.Invoke(ctx, CheckpointsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) UpdateCheckpoint(ctx context.Context, in *UpdateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointDto2, error) {
	out := new(CheckpointDto2)
	err := c.cc.Invoke(ctx, CheckpointsService_UpdateCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkpointsServiceClient) GetAllPagedCheckpoints(ctx context.Context, in *GetAllPagedCheckpointsRequest, opts ...grpc.CallOption) (*ListCheckpointDtoResponse, error) {
	out := new(ListCheckpointDtoResponse)
	err := c.cc.Invoke(ctx, CheckpointsService_GetAllPagedCheckpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckpointsServiceServer is the server API for CheckpointsService service.
// All implementations must embed UnimplementedCheckpointsServiceServer
// for forward compatibility
type CheckpointsServiceServer interface {
	CreateCheckpoint(context.Context, *CreateCheckpointRequest) (*CheckpointDto2, error)
	CreateCheckpointSecret(context.Context, *CreateCheckpointSecretRequest) (*CheckpointDto2, error)
	UpdateCheckpointSecret(context.Context, *UpdateCheckpointSecretRequest) (*CheckpointDto2, error)
	DeleteCheckpoint(context.Context, *DeleteCheckpointRequest) (*ActionResponse2, error)
	GetAllByTour(context.Context, *GetCheckpointsByTourRequest) (*ListCheckpointDtoResponse, error)
	GetById(context.Context, *GetCheckpointDetailsRequest) (*CheckpointDto2, error)
	UpdateCheckpoint(context.Context, *UpdateCheckpointRequest) (*CheckpointDto2, error)
	GetAllPagedCheckpoints(context.Context, *GetAllPagedCheckpointsRequest) (*ListCheckpointDtoResponse, error)
	mustEmbedUnimplementedCheckpointsServiceServer()
}

// UnimplementedCheckpointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckpointsServiceServer struct {
}

func (UnimplementedCheckpointsServiceServer) CreateCheckpoint(context.Context, *CreateCheckpointRequest) (*CheckpointDto2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpoint not implemented")
}
func (UnimplementedCheckpointsServiceServer) CreateCheckpointSecret(context.Context, *CreateCheckpointSecretRequest) (*CheckpointDto2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckpointSecret not implemented")
}
func (UnimplementedCheckpointsServiceServer) UpdateCheckpointSecret(context.Context, *UpdateCheckpointSecretRequest) (*CheckpointDto2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckpointSecret not implemented")
}
func (UnimplementedCheckpointsServiceServer) DeleteCheckpoint(context.Context, *DeleteCheckpointRequest) (*ActionResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckpoint not implemented")
}
func (UnimplementedCheckpointsServiceServer) GetAllByTour(context.Context, *GetCheckpointsByTourRequest) (*ListCheckpointDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByTour not implemented")
}
func (UnimplementedCheckpointsServiceServer) GetById(context.Context, *GetCheckpointDetailsRequest) (*CheckpointDto2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCheckpointsServiceServer) UpdateCheckpoint(context.Context, *UpdateCheckpointRequest) (*CheckpointDto2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckpoint not implemented")
}
func (UnimplementedCheckpointsServiceServer) GetAllPagedCheckpoints(context.Context, *GetAllPagedCheckpointsRequest) (*ListCheckpointDtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPagedCheckpoints not implemented")
}
func (UnimplementedCheckpointsServiceServer) mustEmbedUnimplementedCheckpointsServiceServer() {}

// UnsafeCheckpointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckpointsServiceServer will
// result in compilation errors.
type UnsafeCheckpointsServiceServer interface {
	mustEmbedUnimplementedCheckpointsServiceServer()
}

func RegisterCheckpointsServiceServer(s grpc.ServiceRegistrar, srv CheckpointsServiceServer) {
	s.RegisterService(&CheckpointsService_ServiceDesc, srv)
}

func _CheckpointsService_CreateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).CreateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_CreateCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).CreateCheckpoint(ctx, req.(*CreateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_CreateCheckpointSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckpointSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).CreateCheckpointSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_CreateCheckpointSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).CreateCheckpointSecret(ctx, req.(*CreateCheckpointSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_UpdateCheckpointSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckpointSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).UpdateCheckpointSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_UpdateCheckpointSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).UpdateCheckpointSecret(ctx, req.(*UpdateCheckpointSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_DeleteCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).DeleteCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_DeleteCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).DeleteCheckpoint(ctx, req.(*DeleteCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_GetAllByTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointsByTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).GetAllByTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_GetAllByTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).GetAllByTour(ctx, req.(*GetCheckpointsByTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).GetById(ctx, req.(*GetCheckpointDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_UpdateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).UpdateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_UpdateCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).UpdateCheckpoint(ctx, req.(*UpdateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckpointsService_GetAllPagedCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPagedCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckpointsServiceServer).GetAllPagedCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckpointsService_GetAllPagedCheckpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckpointsServiceServer).GetAllPagedCheckpoints(ctx, req.(*GetAllPagedCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckpointsService_ServiceDesc is the grpc.ServiceDesc for CheckpointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckpointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CheckpointsService",
	HandlerType: (*CheckpointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCheckpoint",
			Handler:    _CheckpointsService_CreateCheckpoint_Handler,
		},
		{
			MethodName: "CreateCheckpointSecret",
			Handler:    _CheckpointsService_CreateCheckpointSecret_Handler,
		},
		{
			MethodName: "UpdateCheckpointSecret",
			Handler:    _CheckpointsService_UpdateCheckpointSecret_Handler,
		},
		{
			MethodName: "DeleteCheckpoint",
			Handler:    _CheckpointsService_DeleteCheckpoint_Handler,
		},
		{
			MethodName: "GetAllByTour",
			Handler:    _CheckpointsService_GetAllByTour_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CheckpointsService_GetById_Handler,
		},
		{
			MethodName: "UpdateCheckpoint",
			Handler:    _CheckpointsService_UpdateCheckpoint_Handler,
		},
		{
			MethodName: "GetAllPagedCheckpoints",
			Handler:    _CheckpointsService_GetAllPagedCheckpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkpoints/checkpoints.proto",
}
