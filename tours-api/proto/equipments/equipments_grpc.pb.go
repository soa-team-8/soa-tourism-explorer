// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: equipments/equipments.proto

package equipments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EquipmentsService_GetAllPagedEquipments_FullMethodName = "/EquipmentsService/GetAllPagedEquipments"
	EquipmentsService_GetAllEquipment_FullMethodName       = "/EquipmentsService/GetAllEquipment"
	EquipmentsService_CreateEquipment_FullMethodName       = "/EquipmentsService/CreateEquipment"
	EquipmentsService_UpdateEquipment_FullMethodName       = "/EquipmentsService/UpdateEquipment"
	EquipmentsService_DeleteEquipment_FullMethodName       = "/EquipmentsService/DeleteEquipment"
)

// EquipmentsServiceClient is the client API for EquipmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentsServiceClient interface {
	GetAllPagedEquipments(ctx context.Context, in *GetAllPagedEquipmentRequest, opts ...grpc.CallOption) (*PagedEquipmentDto, error)
	GetAllEquipment(ctx context.Context, in *GetAllEquipmentRequest, opts ...grpc.CallOption) (*EquipmentListDto, error)
	CreateEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentDto3, error)
	UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentDto3, error)
	DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*ActionResponse3, error)
}

type equipmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentsServiceClient(cc grpc.ClientConnInterface) EquipmentsServiceClient {
	return &equipmentsServiceClient{cc}
}

func (c *equipmentsServiceClient) GetAllPagedEquipments(ctx context.Context, in *GetAllPagedEquipmentRequest, opts ...grpc.CallOption) (*PagedEquipmentDto, error) {
	out := new(PagedEquipmentDto)
	err := c.cc.Invoke(ctx, EquipmentsService_GetAllPagedEquipments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) GetAllEquipment(ctx context.Context, in *GetAllEquipmentRequest, opts ...grpc.CallOption) (*EquipmentListDto, error) {
	out := new(EquipmentListDto)
	err := c.cc.Invoke(ctx, EquipmentsService_GetAllEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) CreateEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentDto3, error) {
	out := new(EquipmentDto3)
	err := c.cc.Invoke(ctx, EquipmentsService_CreateEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentDto3, error) {
	out := new(EquipmentDto3)
	err := c.cc.Invoke(ctx, EquipmentsService_UpdateEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*ActionResponse3, error) {
	out := new(ActionResponse3)
	err := c.cc.Invoke(ctx, EquipmentsService_DeleteEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentsServiceServer is the server API for EquipmentsService service.
// All implementations must embed UnimplementedEquipmentsServiceServer
// for forward compatibility
type EquipmentsServiceServer interface {
	GetAllPagedEquipments(context.Context, *GetAllPagedEquipmentRequest) (*PagedEquipmentDto, error)
	GetAllEquipment(context.Context, *GetAllEquipmentRequest) (*EquipmentListDto, error)
	CreateEquipment(context.Context, *CreateEquipmentRequest) (*EquipmentDto3, error)
	UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*EquipmentDto3, error)
	DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*ActionResponse3, error)
	mustEmbedUnimplementedEquipmentsServiceServer()
}

// UnimplementedEquipmentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEquipmentsServiceServer struct {
}

func (UnimplementedEquipmentsServiceServer) GetAllPagedEquipments(context.Context, *GetAllPagedEquipmentRequest) (*PagedEquipmentDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPagedEquipments not implemented")
}
func (UnimplementedEquipmentsServiceServer) GetAllEquipment(context.Context, *GetAllEquipmentRequest) (*EquipmentListDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEquipment not implemented")
}
func (UnimplementedEquipmentsServiceServer) CreateEquipment(context.Context, *CreateEquipmentRequest) (*EquipmentDto3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEquipment not implemented")
}
func (UnimplementedEquipmentsServiceServer) UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*EquipmentDto3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEquipment not implemented")
}
func (UnimplementedEquipmentsServiceServer) DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*ActionResponse3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEquipment not implemented")
}
func (UnimplementedEquipmentsServiceServer) mustEmbedUnimplementedEquipmentsServiceServer() {}

// UnsafeEquipmentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentsServiceServer will
// result in compilation errors.
type UnsafeEquipmentsServiceServer interface {
	mustEmbedUnimplementedEquipmentsServiceServer()
}

func RegisterEquipmentsServiceServer(s grpc.ServiceRegistrar, srv EquipmentsServiceServer) {
	s.RegisterService(&EquipmentsService_ServiceDesc, srv)
}

func _EquipmentsService_GetAllPagedEquipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPagedEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentsServiceServer).GetAllPagedEquipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentsService_GetAllPagedEquipments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentsServiceServer).GetAllPagedEquipments(ctx, req.(*GetAllPagedEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentsService_GetAllEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentsServiceServer).GetAllEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentsService_GetAllEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentsServiceServer).GetAllEquipment(ctx, req.(*GetAllEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentsService_CreateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentsServiceServer).CreateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentsService_CreateEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentsServiceServer).CreateEquipment(ctx, req.(*CreateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentsService_UpdateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentsServiceServer).UpdateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentsService_UpdateEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentsServiceServer).UpdateEquipment(ctx, req.(*UpdateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipmentsService_DeleteEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentsServiceServer).DeleteEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EquipmentsService_DeleteEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentsServiceServer).DeleteEquipment(ctx, req.(*DeleteEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EquipmentsService_ServiceDesc is the grpc.ServiceDesc for EquipmentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquipmentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EquipmentsService",
	HandlerType: (*EquipmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPagedEquipments",
			Handler:    _EquipmentsService_GetAllPagedEquipments_Handler,
		},
		{
			MethodName: "GetAllEquipment",
			Handler:    _EquipmentsService_GetAllEquipment_Handler,
		},
		{
			MethodName: "CreateEquipment",
			Handler:    _EquipmentsService_CreateEquipment_Handler,
		},
		{
			MethodName: "UpdateEquipment",
			Handler:    _EquipmentsService_UpdateEquipment_Handler,
		},
		{
			MethodName: "DeleteEquipment",
			Handler:    _EquipmentsService_DeleteEquipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equipments/equipments.proto",
}
